// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  password  String
  role      Role      @default(CASHIER)
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  orders    Order[]

  @@map("users")
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[]

  @@map("product_categories")
}

model Product {
  id               Int               @id @default(autoincrement())
  categoryId       Int?              @map("category_id")
  name             String
  price            Decimal           @db.Decimal(10, 2)
  stock            Int
  image            String?
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  category         ProductCategory?  @relation(fields: [categoryId], references: [id])
  orderItems       OrderItem[]
  productDiscounts ProductDiscount[]

  @@map("products")
}

model Discount {
  id               Int               @id @default(autoincrement())
  name             String
  type             DiscountType
  value            Decimal?          @db.Decimal(10, 2)
  freeProduct      Int?              @map("free_product")
  startDate        DateTime          @map("start_date")
  endDate          DateTime          @map("end_date")
  isActive         Boolean           @default(true) @map("is_active")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  productDiscounts ProductDiscount[]
  orderDiscounts   OrderDiscount[]

  @@map("discounts")
}

model Order {
  id             Int             @id @default(autoincrement())
  orderNumber    String          @unique @map("order_number")
  customerName   String          @map("customer_name")
  tableNumber    String?         @map("table_number")
  orderType      OrderType       @default(DINE_IN) @map("order_type")
  cashierId      Int             @map("cashier_id")
  subtotal       Decimal         @db.Decimal(10, 2)
  discountAmount Decimal         @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  taxAmount      Decimal         @default(0.00) @map("tax_amount") @db.Decimal(10, 2)
  totalAmount    Decimal         @map("total_amount") @db.Decimal(10, 2)
  status         OrderStatus     @default(PENDING)
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  deletedAt      DateTime?       @map("deleted_at")
  cashier        User            @relation(fields: [cashierId], references: [id])
  orderItems     OrderItem[]
  orderDiscounts OrderDiscount[]
  payments       Payment[]

  @@map("orders")
}

model OrderItem {
  id             Int      @id @default(autoincrement())
  orderId        Int      @map("order_id")
  productId      Int      @map("product_id")
  quantity       Int
  unitPrice      Decimal  @map("unit_price") @db.Decimal(10, 2)
  discountAmount Decimal  @default(0.00) @map("discount_amount") @db.Decimal(10, 2)
  subtotal       Decimal  @db.Decimal(10, 2)
  notes          String?  @db.Text
  createdAt      DateTime @default(now()) @map("created_at")
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model ProductDiscount {
  id         Int      @id @default(autoincrement())
  productId  Int      @map("product_id")
  discountId Int      @map("discount_id")
  createdAt  DateTime @default(now()) @map("created_at")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  discount   Discount @relation(fields: [discountId], references: [id], onDelete: Cascade)

  @@unique([productId, discountId])
  @@map("product_discounts")
}

model OrderDiscount {
  id          Int      @id @default(autoincrement())
  orderId     Int      @map("order_id")
  discountId  Int      @map("discount_id")
  amountSaved Decimal  @map("amount_saved") @db.Decimal(10, 2)
  createdAt   DateTime @default(now()) @map("created_at")
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  discount    Discount @relation(fields: [discountId], references: [id])

  @@map("order_discounts")
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @map("order_id")
  paymentMethod PaymentMethod @map("payment_method")
  amount        Decimal       @db.Decimal(10, 2)
  change        Decimal       @default(0.00) @db.Decimal(10, 2)
  transactionId String?       @map("transaction_id")
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("settings")
}

enum Role {
  ADMIN
  CASHIER
  CUSTOMER
}

enum DiscountType {
  PERCENTAGE
  FIXED
  BUY_X_GET_Y

  @@map("enum_discount_type")
}

enum OrderType {
  DINE_IN
  TAKEAWAY

  @@map("enum_order_type")
}

enum OrderStatus {
  PENDING
  PAID
  COMPLETED
  CANCELLED

  @@map("enum_order_status")
}

enum PaymentMethod {
  CASH
  QRIS

  @@map("enum_payment_method")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED

  @@map("enum_payment_status")
}
